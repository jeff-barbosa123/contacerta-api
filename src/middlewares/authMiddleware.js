import jwt from 'jsonwebtoken';

/**
 * Middleware de autentica√ß√£o JWT
 * Valida o token enviado no cabe√ßalho Authorization: Bearer <token>
 */
export function authMiddleware(req, res, next) {
  const auth = req.headers.authorization || '';
  const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;

  // üîé Se n√£o houver token, retorna erro 401
  if (!token) {
    return res.status(401).json({
      status: 401,
      mensagem: 'Acesso negado. Token JWT ausente. Fa√ßa login novamente.'
    });
  }

  try {
    // üîê Valida o token com a chave secreta definida no .env
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret');
    req.user = decoded; // Anexa os dados do usu√°rio ao request
    next(); // Continua a execu√ß√£o
  } catch (error) {
    // ‚ùå Token inv√°lido ou expirado
    return res.status(401).json({
      status: 401,
      mensagem: 'Token inv√°lido ou expirado. Fa√ßa login novamente.'
    });
  }
}