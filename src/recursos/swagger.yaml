openapi: 3.0.0
info:
  title: API ContaCerta
  version: "1.0.0"
  description: |
    API RESTful para controle financeiro e de vendas ÔÇö ContaCerta v3.
    Inclui autentica├º├úo JWT, CRUDs, c├ílculo de CMV e relat├│rios.
  contact:
    name: ContaCerta Team

servers:
  - url: http://localhost:3000
    description: Servidor local

tags:
  - name: auth
    description: Autentica├º├úo e sess├úo
  - name: clientes
    description: Cadastro e gest├úo de clientes
  - name: produtos
    description: Cadastro e gest├úo de produtos
  - name: pedidos
    description: Registro e consulta de pedidos
  - name: relatorios
    description: Relat├│rios financeiros

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Authorization:
      name: Authorization
      in: header
      description: Token JWT no formato Bearer <token>
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    IdPath:
      name: id
      in: path
      description: Identificador num├®rico do recurso
      required: true
      schema:
        type: integer
        example: 1

    ErroPadrao:
      type: object
      properties:
        success: { type: boolean, example: false }
        codigo: { type: string, example: "ERR_VALIDACAO_CAMPOS" }
        mensagem: { type: string, example: "Um ou mais campos estão inválidos ou ausentes." }
        detalhes:
          type: array
          items:
            type: object
            properties:
              campo: { type: string, example: "nome" }
              erro: { type: string, example: "Obrigatório" }
        timestamp: { type: string, example: "2025-10-29T12:00:00.000Z" }

    UsuarioLogin:
      type: object
      required: [email, senha]
      properties:
        email: { type: string, example: "admin@contacerta.com" }
        senha: { type: string, example: "admin123" }

    UsuarioLoginResposta:
      type: object
      properties:
        success: { type: boolean, example: true }
        mensagem: { type: string, example: "Login realizado com sucesso!" }
        data:
          type: object
          properties:
            usuario:
              type: object
              properties:
                id: { type: integer, example: 1 }
                nome: { type: string, example: "Administrador" }
                email: { type: string, example: "admin@contacerta.com" }
            token: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        timestamp: { type: string, example: "2025-10-29T12:00:00.000Z" }

    UsuarioRegister:
      type: object
      required: [email, senha]
      properties:
        nome: { type: string, example: "Maria Souza" }
        email: { type: string, example: "novo@contacerta.com" }
        senha:
          type: string
          example: "SenhaForte123!"
          minLength: 8
          description: "M├¡n. 8 caracteres, contendo mai├║scula, min├║scula, n├║mero e caractere especial"
        perfil: { type: string, example: "user" }

    PasswordChangeInput:
      type: object
      required: [senhaAtual, novaSenha]
      properties:
        senhaAtual: { type: string, example: "SenhaForte123!" }
        novaSenha:
          type: string
          example: "NovaSenhaF0rte!"
          minLength: 8
          description: "M├¡n. 8 caracteres, contendo mai├║scula, min├║scula, n├║mero e caractere especial"

    ForgotPasswordInput:
      type: object
      required: [email]
      properties:
        email: { type: string, example: "usuario@contacerta.com" }

    ResetPasswordInput:
      type: object
      required: [token, novaSenha]
      properties:
        token: { type: string, example: "<token_de_reset>" }
        novaSenha:
          type: string
          example: "NovaSenhaF0rte!"
          minLength: 8
          description: "M├¡n. 8 caracteres, contendo mai├║scula, min├║scula, n├║mero e caractere especial"

    Cliente:
      type: object
      properties:
        id: { type: integer, example: 1 }
        nome: { type: string, example: "Maria Souza" }
        telefone: { type: string, example: "(81) 98888-7777" }
        aniversario: { type: string, format: date, example: "1990-03-25" }
        cpf_cnpj: { type: string, example: "123.456.789-00" }
        endereco: { type: string, example: "Rua Exemplo, 123 - Recife/PE" }

    ClienteInput:
      type: object
      required: [nome, telefone, aniversario]
      properties:
        nome: { type: string, example: "Jo├úo da Silva" }
        telefone: { type: string, example: "(81) 97777-6666" }
        aniversario: { type: string, format: date, example: "1985-11-12" }
        cpf_cnpj: { type: string, example: "987.654.321-00" }
        endereco: { type: string, example: "Av. Teste, 42 - Olinda/PE" }

    Produto:
      type: object
      properties:
        id: { type: integer, example: 10 }
        nome: { type: string, example: "Bolo de Rolo" }
        custo: { type: number, example: 12.5 }
        preco: { type: number, example: 25.0 }
        estoque: { type: integer, example: 30 }
        categoria: { type: string, example: "Doces" }

    ProdutoInput:
      type: object
      required: [nome, custo, preco, estoque]
      properties:
        nome: { type: string, example: "Coxinha de Frango" }
        custo: { type: number, example: 3.0 }
        preco: { type: number, example: 6.0 }
        estoque: { type: integer, example: 100 }
        categoria: { type: string, example: "Salgados" }

    Pedido:
      type: object
      properties:
        id: { type: integer, example: 1 }
        cliente_id: { type: integer, example: 1 }
        itens:
          type: array
          items:
            type: object
            properties:
              produto_id: { type: integer, example: 1 }
              quantidade: { type: integer, example: 2 }
        total: { type: number, example: 50.0 }
        formaPagamento: { type: string, example: "Pix" }
        statusPedido: { type: string, example: "Concluido" }
        criadoEm: { type: string, example: "2025-10-26T10:00:00.000Z" }

    PedidoInput:
      type: object
      required: [cliente_id, itens]
      properties:
        cliente_id: { type: integer, example: 1 }
        itens:
          type: array
          items:
            type: object
            required: [produto_id, quantidade]
            properties:
              produto_id: { type: integer, example: 1 }
              quantidade: { type: integer, example: 2 }
        formaPagamento: { type: string, example: "Pix" }

    RelatorioCMV:
      type: object
      properties:
        cmv_total: { type: number, example: 1500.75 }
        cmv_base: { type: number, example: 12.5 }
        lucro_bruto_total: { type: number, example: 980.50 }
        lucro_percentual: { type: number, example: 65.33, description: "(lucro_bruto_total / cmv_total) * 100" }
        periodo: { type: string, nullable: true, example: "2025-10" }

    ProdutoUpdateResultado:
      type: object
      properties:
        updated: { type: boolean, example: true }
        sugestao:
          type: string
          nullable: true
          example: "O custo aumentou. Considere revisar o preco de venda."

    RelatorioRendimentoItem:
      type: object
      properties:
        produto: { type: string, example: "Bolo de Rolo" }
        custo_unitario: { type: number, example: 12.5 }
        preco_venda: { type: number, example: 25 }
        quantidade: { type: integer, example: 20 }
        lucro_unitario: { type: number, example: 12.5 }
        margem_percentual: { type: string, example: "100.00%" }
        rendimento_total: { type: number, example: 250 }

    RelatorioClientesFieisItem:
      type: object
      properties:
        cliente: { type: string, example: "Maria Souza" }
        total_pedidos: { type: integer, example: 5 }

security:
  - bearerAuth: []

paths:
  # AUTH
  /api/auth/login:
    post:
      tags: [auth]
      summary: Realiza o login e retorna o token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UsuarioLogin" }
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/UsuarioLoginResposta" } } } }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Credenciais incorretas, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "500": { description: Erro interno, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/auth/register:
    post:
      tags: [auth]
      summary: Registra um novo usu├írio e retorna token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UsuarioRegister" }
      responses:
        "201": { description: Usu├írio criado com sucesso, content: { application/json: { schema: { $ref: "#/components/schemas/UsuarioLoginResposta" } } } }
        "400": { description: Requisi├º├úo inv├ílida (e-mail inv├ílido ou senha fraca ÔÇö m├¡n. 8, com mai├║scula, min├║scula, n├║mero e caractere especial), content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "409": { description: E-mail j├í cadastrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "500": { description: Erro interno, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/auth/change-password:
    post:
      tags: [auth]
      summary: Altera a senha do usu├írio autenticado
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PasswordChangeInput" }
      responses:
        "200": { description: Senha alterada com sucesso }
        "400": { description: Requisi├º├úo inv├ílida (campos faltando ou senha fraca), content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: N├úo autenticado ou senha atual incorreta, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "500": { description: Erro interno, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/auth/forgot-password:
    post:
      tags: [auth]
      summary: Solicita reset de senha (sempre 200)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ForgotPasswordInput" }
      responses:
        "200": { description: Caso exista, instru├º├Áes ser├úo enviadas. Em desenvolvimento, um token pode ser retornado na resposta. }

  /api/auth/reset-password:
    post:
      tags: [auth]
      summary: Redefine a senha usando token v├ílido
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ResetPasswordInput" }
      responses:
        "200": { description: Senha redefinida com sucesso }
        "400": { description: Requisi├º├úo inv├ílida (campos faltando ou senha fraca), content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token inv├ílido ou expirado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "500": { description: Erro interno, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  # CLIENTES
  /api/clientes:
    get:
      tags: [clientes]
      summary: Lista clientes
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Cliente" }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    post:
      tags: [clientes]
      summary: Cadastra novo cliente
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ClienteInput" }
      responses:
        "201": { description: Cliente criado, content: { application/json: { schema: { $ref: "#/components/schemas/Cliente" } } } }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/clientes/{id}:
    get:
      tags: [clientes]
      summary: Retorna cliente por ID
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Cliente encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/Cliente" } } } }
        "401": { description: Token inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Cliente n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    put:
      tags: [clientes]
      summary: Atualiza dados do cliente
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ClienteInput" }
      responses:
        "200": { description: Cliente atualizado, content: { application/json: { schema: { $ref: "#/components/schemas/Cliente" } } } }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Cliente n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    patch:
      tags: [clientes]
      summary: Atualiza parcialmente os dados do cliente
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ClienteInput" }
      responses:
        "200": { description: Cliente atualizado parcialmente, content: { application/json: { schema: { $ref: "#/components/schemas/Cliente" } } } }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Cliente n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    delete:
      tags: [clientes]
      summary: Remove cliente
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Cliente removido }
        "401": { description: Token inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Cliente n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  # PRODUTOS
  /api/produtos:
    get:
      tags: [produtos]
      summary: Lista produtos
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Produto" }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    post:
      tags: [produtos]
      summary: Cadastra novo produto
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProdutoInput" }
      responses:
        "201": { description: Produto criado, content: { application/json: { schema: { $ref: "#/components/schemas/Produto" } } } }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/produtos/{id}:
    get:
      tags: [produtos]
      summary: Retorna produto por ID
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Produto encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/Produto" } } } }
        "404": { description: Produto n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    put:
      tags: [produtos]
      summary: Atualiza produto
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProdutoInput" }
      responses:
        "200":
          description: Produto atualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProdutoUpdateResultado"
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    patch:
      tags: [produtos]
      summary: Atualiza parcialmente produto
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProdutoInput" }
      responses:
        "200": { description: Produto atualizado parcialmente }
        "400": { description: Requisi├º├úo inv├ílida, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    delete:
      tags: [produtos]
      summary: Remove produto
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Produto removido }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Produto n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  # PEDIDOS
  /api/pedidos:
    get:
      tags: [pedidos]
      summary: Lista pedidos
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Pedido" }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
    post:
      tags: [pedidos]
      summary: Cria novo pedido
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PedidoInput" }
      responses:
        "201":
          description: Pedido criado. Pode incluir mensagens de estoque baixo em data.mensagens (quando aplic├ível)
        "400": { description: Requisi├º├úo inv├ílida (ex.: itens ausentes ou produto inexistente), content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "422": { description: Estoque insuficiente, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  /api/pedidos/{id}:
    get:
      tags: [pedidos]
      summary: Retorna pedido por ID
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Pedido encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/Pedido" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
        "404": { description: Pedido n├úo encontrado, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }

  # RELAT├ôRIOS
  /api/relatorios/cmv:
    get:
      tags: [relatorios]
      summary: Retorna o CMV total
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/RelatorioCMV" } } } }
        "401": { description: Token ausente ou inv├ílido, content: { application/json: { schema: { $ref: "#/components/schemas/ErroPadrao" } } } }
