openapi: 3.0.0
info:
  title: API ContaCerta
  version: "1.0.0"
  description: |
    API RESTful para controle financeiro e de vendas Ã”Ã‡Ã¶ ContaCerta v3.
    Inclui autenticaâ”œÂºâ”œÃºo JWT, CRUDs, câ”œÃ­lculo de CMV e relatâ”œâ”‚rios.
  contact:
    name: ContaCerta Team

servers:
  - url: http://localhost:3000
    description: Servidor local

tags:
  - name: auth
    description: Autenticaâ”œÂºâ”œÃºo e sessâ”œÃºo
  - name: clientes
    description: Cadastro e gestâ”œÃºo de clientes
  - name: produtos
    description: Cadastro e gestâ”œÃºo de produtos
  - name: pedidos
    description: Registro e consulta de pedidos
  - name: relatorios
    description: Relatâ”œâ”‚rios financeiros

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Authorization:
      name: Authorization
      in: header
      description: Token JWT no formato Bearer <token>
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    IdPath:
      name: id
      in: path
      description: Identificador numâ”œÂ®rico do recurso
      required: true
      schema:
        type: integer
        example: 1

  schemas:
    ErroPadrao:
      type: object
      properties:
        sucesso: { type: boolean, example: false }
        status: { type: integer, example: 400 }
        mensagem: { type: string, example: "Campos obrigatâ”œâ”‚rios ausentes" }
        timestamp: { type: string, example: "2025-10-29T12:00:00.000Z" }

    UsuarioLogin:
      type: object
      required: [email, senha]
      properties:
        email: { type: string, example: "admin@contacerta.com" }
        senha: { type: string, example: "admin123" }

    UsuarioLoginResposta:
      type: object
      properties:
        sucesso: { type: boolean, example: true }
        status: { type: integer, example: 200 }
        mensagem: { type: string, example: "Login realizado com sucesso!" }
        data:
          type: object
          properties:
            usuario:
              type: object
              properties:
                id: { type: integer, example: 1 }
                nome: { type: string, example: "Administrador" }
                email: { type: string, example: "admin@contacerta.com" }
            token: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        timestamp: { type: string, example: "2025-10-29T12:00:00.000Z" }

    UsuarioRegister:
      type: object
      required: [email, senha]
      properties:
        nome: { type: string, example: "Maria Souza" }
        email: { type: string, example: "novo@contacerta.com" }
        senha:
          type: string
          example: "SenhaForte123!"
          minLength: 8
          description: "Mâ”œÂ¡n. 8 caracteres, contendo maiâ”œâ•‘scula, minâ”œâ•‘scula, nâ”œâ•‘mero e caractere especial"
        perfil: { type: string, example: "user" }

    PasswordChangeInput:
      type: object
      required: [senhaAtual, novaSenha]
      properties:
        senhaAtual: { type: string, example: "SenhaForte123!" }
        novaSenha:
          type: string
          example: "NovaSenhaF0rte!"
          minLength: 8
          description: "Mâ”œÂ¡n. 8 caracteres, contendo maiâ”œâ•‘scula, minâ”œâ•‘scula, nâ”œâ•‘mero e caractere especial"

    ForgotPasswordInput:
      type: object
      required: [email]
      properties:
        email: { type: string, example: "usuario@contacerta.com" }

    ResetPasswordInput:
      type: object
      required: [token, novaSenha]
      properties:
        token: { type: string, example: "<token_de_reset>" }
        novaSenha:
          type: string
          example: "NovaSenhaF0rte!"
          minLength: 8
          description: "Mâ”œÂ¡n. 8 caracteres, contendo maiâ”œâ•‘scula, minâ”œâ•‘scula, nâ”œâ•‘mero e caractere especial"

    Cliente:
      type: object
      properties:
        id: { type: integer, example: 1 }
        nome: { type: string, example: "Maria Souza" }
        telefone: { type: string, example: "(81) 98888-7777" }
        aniversario: { type: string, format: date, example: "1990-03-25" }
        cpf_cnpj: { type: string, example: "123.456.789-00" }
        endereco: { type: string, example: "Rua Exemplo, 123 - Recife/PE" }

    ClienteInput:
      type: object
      required: [nome, telefone, aniversario]
      properties:
        nome: { type: string, example: "Joâ”œÃºo da Silva" }
        telefone: { type: string, example: "(81) 97777-6666" }
        aniversario: { type: string, format: date, example: "1985-11-12" }
        cpf_cnpj: { type: string, example: "987.654.321-00" }
        endereco: { type: string, example: "Av. Teste, 42 - Olinda/PE" }

    Produto:
      type: object
      properties:
        id: { type: integer, example: 10 }
        nome: { type: string, example: "Bolo de Rolo" }
        custo: { type: number, example: 12.5 }
        preco: { type: number, example: 25.0 }
        estoque: { type: integer, example: 30 }
        categoria: { type: string, example: "Doces" }

    ProdutoInput:
      type: object
      required: [nome, custo, preco, estoque]
      properties:
        nome: { type: string, example: "Coxinha de Frango" }
        custo: { type: number, example: 3.0 }
        preco: { type: number, example: 6.0 }
        estoque: { type: integer, example: 100 }
        categoria: { type: string, example: "Salgados" }

    Pedido:
      type: object
      properties:
        id: { type: integer, example: 1 }
        cliente_id: { type: integer, example: 1 }
        itens:
          type: array
          items:
            type: object
            properties:
              produto_id: { type: integer, example: 1 }
              quantidade: { type: integer, example: 2 }
        total: { type: number, example: 50.0 }
        formaPagamento: { type: string, example: "Pix" }
        statusPedido: { type: string, example: "Concluido" }
        criadoEm: { type: string, example: "2025-10-26T10:00:00.000Z" }

    PedidoInput:
      type: object
      required: [cliente_id, itens]
      properties:
        cliente_id: { type: integer, example: 1 }
        itens:
          type: array
          items:
            type: object
            required: [produto_id, quantidade]
            properties:
              produto_id: { type: integer, example: 1 }
              quantidade: { type: integer, example: 2 }
        formaPagamento: { type: string, example: "Pix" }

            overhead_total: { type: number, example: 420.00 }\n        cmv_real_total: { type: number, example: 1920.75 }\n        lucro_real_total: { type: number, example: 560.50 }\n        periodo: { type: string, nullable: true, example: "2025-10" }

    ProdutoUpdateResultado:
      type: object
      properties:
        updated: { type: boolean, example: true }
        sugestao:
          type: string
          nullable: true
          example: "O custo aumentou. Considere revisar o preco de venda."

    RelatorioRendimentoItem:
      type: object
      properties:
        produto: { type: string, example: "Bolo de Rolo" }
        custo_unitario: { type: number, example: 12.5 }
        preco_venda: { type: number, example: 25 }
        quantidade: { type: integer, example: 20 }
        lucro_unitario: { type: number, example: 12.5 }
        margem_percentual: { type: string, example: "100.00%" }
        rendimento_total: { type: number, example: 250 }

        Custo:
      type: object
      properties:
        id: { type: integer, example: 1 }
        tipo: { type: string, example: "energia" }
        valor: { type: number, example: 350.0 }
        periodo: { type: string, example: "2025-10" }
    CustoInput:
      type: object
      required: [tipo, valor, periodo]
      properties:
        tipo: { type: string, example: "energia" }
        valor: { type: number, example: 350.0 }
        periodo: { type: string, example: "2025-10" }
    Perda:
      type: object
      properties:
        id: { type: integer, example: 1 }
        tipo: { type: string, example: "descarte" }
        referencia: { type: string, example: "ingrediente" }
        ref_id: { type: integer, example: 10 }
        quantidade: { type: number, example: 1.2 }
        valor: { type: number, example: 25.0 }
        periodo: { type: string, example: "2025-10" }
        Ingrediente:
      type: object
      properties:
        id: { type: integer, example: 1 }
        nome: { type: string, example: "Arroz" }
        unidade: { type: string, example: "kg" }
        estoque: { type: number, example: 20 }
        custoUnitario: { type: number, example: 6.5 }
    IngredienteInput:
      type: object
      required: [nome, unidade, estoque, custoUnitario]
      properties:
        nome: { type: string, example: "Arroz" }
        unidade: { type: string, example: "kg" }
        estoque: { type: number, example: 20 }
        custoUnitario: { type: number, example: 6.5 }
    Receita:
      type: object
      properties:
        produto_id: { type: integer, example: 10 }
        itens:
          type: array
          items:
            type: object
            properties:
              ingrediente_id: { type: integer, example: 1 }
              quantidade: { type: number, example: 0.15 }        referencia: { type: string, example: "ingrediente" }
        ref_id: { type: integer, example: 10 }
        quantidade: { type: number, example: 1.2 }
        valor: { type: number, example: 25.0 }
        periodo: { type: string, example: "2025-10" }        total_pedidos: { type: integer, example: 5 }

security:
  - bearerAuth: []


  /api/custos:
    get:
      tags: [custos]
      summary: Lista custos por perÃ­odo/tipo
      parameters:
        - in: query
          name: periodo
          schema: { type: string, example: "2025-10" }
        - in: query
          name: tipo
          schema: { type: string }
      responses:
        "200": { description: OK }
    post:
      tags: [custos]
      summary: Cria um custo
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CustoInput" }
      responses:
        "201": { description: Criado }
  /api/custos/{id}:
    put:
      tags: [custos]
      summary: Atualiza um custo
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CustoInput" }
      responses:
        "200": { description: OK }
    delete:
      tags: [custos]
      summary: Remove um custo
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Removido }
  /api/perdas:
    get:
      tags: [perdas]
      summary: Lista perdas por perÃ­odo/tipo
      parameters:
        - in: query
          name: periodo
          schema: { type: string, example: "2025-10" }
        - in: query
          name: tipo
          schema: { type: string }
      responses:
        "200": { description: OK }
    post:
      tags: [perdas]
      summary: Registra uma perda
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PerdaInput" }
      responses:
        "201": { description: Criado }
  /api/perdas/{id}:
    put:
      tags: [perdas]
      summary: Atualiza uma perda
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PerdaInput" }
      responses:
        "200": { description: OK }
    delete:
      tags: [perdas]
      summary: Remove uma perda
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        "200": { description: Removido }
